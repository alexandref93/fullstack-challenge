schema {
  query: TwitterAPI
}

# Retweet of a tweet
type Retweet {
  id: ID
  created_at: String
  in_reply_to_tweet_id: String
  in_reply_to_user_id: Int
  in_reply_to_screen_name: String
  retweeted_status: Tweet
  user: TwitterUser
}

# Type of search response.
enum SearchReponse {
  mixed
  recent
  popular
}

# A tweet object
type Tweet {
  id: ID
  created_at: String
  text: String
  retweet_count: Int
  user: TwitterUser

  # Get a list of retweets
  retweets(limit: Int = 5): [Retweet]
}

# The Twitter API
type TwitterAPI {
  user(
    # Either user_id or screen_name
    identifier: UserIdentifier!

    # User ID (Integer) or Screen name (String) to identify user
    identity: UserIdentity!
  ): TwitterUser
  tweet(
    # Unique ID of tweet
    id: String!
  ): Tweet

  # Returns a collection of relevant Tweets matching a specified query.
  search(
    # A UTF-8, URL-encoded search query of 500 characters maximum, including
    # operators. Queries may additionally be limited by complexity.
    q: String!

    # The number of tweets to return per page, up to a maximum of 100. This was
    # formerly the “rpp” parameter in the old Search API.
    count: Int

    # Specifies what type of search results you would prefer to receive. Valid values include:
    #           * mixed: Include both popular and real time results in the response.
    #           * recent: return only the most recent results in the response
    #           * popular: return only the most popular results in the response.
    result_type: SearchReponse
  ): [Tweet]
}

# Twitter user
type TwitterUser {
  created_at: String
  description: String
  id: ID
  screen_name: String
  name: String
  profile_image_url: String
  url: String
  tweets_count: Int
  followers_count: Int

  # Get a list of tweets for current user
  tweets(limit: Int = 10): [Tweet]
}

# Either user unique ID, or screen name
enum UserIdentifier {
  id
  name
}

# Parse user provided identity
scalar UserIdentity
